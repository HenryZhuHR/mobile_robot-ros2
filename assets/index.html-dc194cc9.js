import{_ as i,r,o as d,c,a as e,b as l,d as n,w as t,e as a}from"./app-691e7cc7.js";const u="/mobile_robot-ros2/assets/system-architecture-7a5aecd8.jpg",h={},_=a('<h1 id="移动机器人开发文档" tabindex="-1"><a class="header-anchor" href="#移动机器人开发文档" aria-hidden="true">#</a> 移动机器人开发文档</h1><h2 id="项目简介" tabindex="-1"><a class="header-anchor" href="#项目简介" aria-hidden="true">#</a> 项目简介</h2><p>涉及技术栈:</p><ul><li>语言层: Python3, C++</li><li>框架: ROS2, PyTorch, TensorRT</li><li>库: OpenCV, TensorRT, MQTT, RTMP</li><li>软件包管理: CMake</li><li>软件开发相关: Git, Github Actions, VSCode, Docker</li></ul><h2 id="项目结构" tabindex="-1"><a class="header-anchor" href="#项目结构" aria-hidden="true">#</a> 项目结构</h2><p><img src="'+u+'" alt="系统架构"></p><p>该项目的 ROS2 工作空间包括 <code>core</code> 和 <code>modules</code></p><p><code>core</code> 中包含功能包如下:</p>',8),g=e("p",null,[e("strong",null,"controller"),l(": 系统控制模块。包括底盘控制、机械臂控制等")],-1),p=e("li",null,"💠 arm_controller: 机械臂控制模块",-1),m=e("p",null,[e("strong",null,"manager"),l(": 系统管理模块。包括系统状态管理、任务管理等")],-1),b=e("li",null,[e("strong",null,"launch"),l(": ROS2 启动文件")],-1),f=e("p",null,[e("strong",null,"base"),l(": 基础模块。包括系统中的基础功能，如基本节点、基本传感器、基本深度学习模型等，便于统一开发")],-1),v=e("p",null,[e("code",null,"modules"),l(" 中包含功能包如下:")],-1),y=e("li",null,[e("p",null,[e("strong",null,"common"),l(": 通用功能模块。包括全局的系统状态码定义、通用的工具函数等")]),e("ul",null,[e("li",null,"✅ system_state: 系统状态码、错误码的全局定义，模块的注册序号，话题、服务、参数的全局定义"),e("li",null,"💠 utils: 通用工具函数")])],-1),k=e("li",null,[e("p",null,[e("strong",null,"interfaces"),l(": 数据接口。 包括各个模块之间的数据接口、消息结构定义")]),e("ul",null,[e("li",null,"✅ state_interfaces: 系统状态接口和服务接口")])],-1),x=e("p",null,[e("strong",null,"data_transmission"),l(": 数据传输模块")],-1),R=e("p",null,[e("strong",null,"sensors"),l(": 传感器模块。包括各种传感器的驱动、数据处理等")],-1),T=e("li",null,"🔄 sensor_uwb: UWB 定位",-1),S=a("<li><p><strong>vision</strong>: 视觉算法模块。包括各种视觉算法的实现</p><ul><li>✅ vision_lanedet: 车道线检测算法</li><li>🚧 vision_objdet: 目标检测算法</li><li>💠 vision_objtrack: 目标检测算法</li></ul></li><li><p><strong>navigation</strong>: 导航模块 (未开发)</p></li><li><p><strong>app</strong>: 应用程序</p><ul><li>💠 app_web: web 端控制面板 (Vue3 + flask)</li></ul></li>",3),C=a(`<p>功能开发流程:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>💠 计划开发 → 🚧 开发中 → 🔄 测试中 → ✅ 开发完成 → ⛔️ 下线
                        ⬆︎        ↙︎ 
                        🐛 修复中
                        🚀 升级中         
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="分支管理" tabindex="-1"><a class="header-anchor" href="#分支管理" aria-hidden="true">#</a> 分支管理</h2><p>项目使用 git 进行版本控制，每个功能模块都应该新建一个分支进行开发，开发完成后合并到 <code>dev</code> 分支，<code>dev</code> 分支的代码经过测试后 PR 到 <code>main</code> 分支。<strong>功能模块命名规则</strong>:</p><p>其他子模块的开发和测试是完全可以独立的，因此，其他功能包的分支应该为 <code>pkg-&lt;group&gt;__&lt;package_name&gt;</code> 结构，<code>&lt;group&gt;</code> 为功能分组，<code>&lt;package_name&gt;</code> 为功能包名，中间用双下划线 <code>__</code> 分隔。</p><p>例如，传感器 (sensors) 中摄像头 (camera) 的分支应该为 <code>pkg-sensors__camera</code></p><h2 id="项目文档" tabindex="-1"><a class="header-anchor" href="#项目文档" aria-hidden="true">#</a> 项目文档</h2><p>拥有开发权限的开发者可以查看完整文档:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span>
<span class="token function">yarn</span> docs:dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="项目规范" tabindex="-1"><a class="header-anchor" href="#项目规范" aria-hidden="true">#</a> 项目规范</h2>`,10),P={href:"https://google.github.io/styleguide/cppguide.html",target:"_blank",rel:"noopener noreferrer"},G={href:"https://zh-google-styleguide.readthedocs.io/en/latest/google-cpp-styleguide/contents/",target:"_blank",rel:"noopener noreferrer"},V={href:"https://google.github.io/styleguide/pyguide.html",target:"_blank",rel:"noopener noreferrer"},j={href:"https://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/contents/",target:"_blank",rel:"noopener noreferrer"},w={href:"https://google.github.io/styleguide/shellguide.html",target:"_blank",rel:"noopener noreferrer"},M={href:"https://zh-google-styleguide.readthedocs.io/en/latest/google-shell-styleguide/contents/",target:"_blank",rel:"noopener noreferrer"},B=e("h2",{id:"开发贡献",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#开发贡献","aria-hidden":"true"},"#"),l(" 开发贡献")],-1),H=e("br",null,null,-1),L=e("a",{href:"https://github.com/HenryZhuHR/mobile_robot-ros2/graphs/contributors"},[e("img",{src:"https://contrib.rocks/image?repo=HenryZhuHR/mobile_robot-ros2"})],-1);function N(O,z){const o=r("RouterLink"),s=r("ExternalLinkIcon");return d(),c("div",null,[_,e("ul",null,[e("li",null,[g,e("ul",null,[e("li",null,[l("🔄 "),n(o,{to:"/core/controller/motion_controller.html"},{default:t(()=>[l("motion_controller")]),_:1}),l(": 运动控制模块")]),p])]),e("li",null,[m,e("ul",null,[b,e("li",null,[l("✅ "),n(o,{to:"/core/manager/system_manager.html"},{default:t(()=>[l("system_manager")]),_:1}),l(": 系统状态管理模块")]),e("li",null,[l("🔄 "),n(o,{to:"/core/manager/system_manager.html"},{default:t(()=>[l("task_manager")]),_:1}),l(": 任务管理模块")])])]),e("li",null,[f,e("ul",null,[e("li",null,[l("✅ "),n(o,{to:"/core/base/base_node.html"},{default:t(()=>[l("base_node")]),_:1}),l(": 为系统中功能节点的开发提供基础，包括节点的初始化、参数的读取、心跳包的发送等。 提供一个参考模板 "),n(o,{to:"/modules/common/base_node.html"},{default:t(()=>[l("node_template")]),_:1})])])])]),v,e("ul",null,[y,k,e("li",null,[x,e("ul",null,[e("li",null,[l("🔄 "),n(o,{to:"/modules/data_transmission/dt_mqtt.html"},{default:t(()=>[l("dt_mqtt")]),_:1}),l(": MQTT 通信模块")]),e("li",null,[l("🚧 "),n(o,{to:"/modules/data_transmission/dt_rtmp.html"},{default:t(()=>[l("dt_rtmp")]),_:1}),l(": 视频推流模块，RTMP 协议")])])]),e("li",null,[R,e("ul",null,[e("li",null,[l("✅ "),n(o,{to:"/modules/sensors/sensor_joy.html"},{default:t(()=>[l("sensor_joy")]),_:1}),l(": 手柄")]),T])]),S]),C,e("ul",null,[e("li",null,[l("C++ 代码规范: "),e("a",P,[l("Google C++ Style Guide"),n(s)]),l(" | "),e("a",G,[l("C++ 风格指南"),n(s)])]),e("li",null,[l("Python 代码规范: "),e("a",V,[l("Google Python Style Guide"),n(s)]),l(" | "),e("a",j,[l("Python 风格指南"),n(s)])]),e("li",null,[l("Shell 代码规范: "),e("a",w,[l("Shell Style Guide"),n(s)]),l(" | "),e("a",M,[l("Shell 风格指南"),n(s)])])]),B,H,L])}const q=i(h,[["render",N],["__file","index.html.vue"]]);export{q as default};
